{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-mat-select-table/mat-select-table.component.ts","ng://ngx-mat-select-table/ngx-mat-select-table.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","MatSelectTableComponent","prototype","ngOnInit","_this","this","multiple","matSelect","openedChange","pipe","takeUntil","_onDestroy","subscribe","opened","resetFiltersOnOpen","matOptions","resetFilters","overallSearchVisibleState","overallSearchVisible","resetSortOnOpen","sort","id","start","disableClear","overallSearchEnabled","proxyMatSelectSearchConfiguration","matSelectSearchConfigurator","_headerRowDefChanged","setTimeout","forEach","tableRef","nativeElement","querySelectorAll","disabled","panelElement","panel","panelHeight","getBoundingClientRect","height","tableAdditionalHeight","table","_getRenderedRows","_headerRowOutlet","_footerRowOutlet","row","isNaN","style","maxHeight","disableScrollToActiveOnOptionsChanged","isNullOrUndefined","_keyManager","completeRowList","_onSelectOpen","debounceTime","take","firstValue","tableDataSource","setActiveItem","cd","detectChanges","ngAfterViewInit","merge","apply","_onOptionsChange","sortChange","filterControls","valueChanges","overallFilterControl","dataClone","dataSource","data","applyOverallFilter","applyColumnLevelFilters","active","defaultSort","direction","sortData","changes","options","toArray","filter","option","reset","map","notifyOnChanges","change","activeRow","tableActiveRow","ngOnDestroy","complete","registerOnChange","fn","completeValueList","filteredOutRows","undefined","indexOf","splice","choice","registerOnTouched","setDisabledState","isDisabled","writeValue","updateCompleteRowList","ngOnChanges","currentValue","matSelectConfigurator","configuration_1","Object","keys","key","includes","controlValueAccessorKeys","panelClass","isArray","tableColumns","columns","column","tableColumnsMap","clear","set","applyProxyToArray","emulateMatOptionClick","event","composedPath","et","HTMLElement","some","tagName","toLowerCase","target","rowElement","parentElement","childOption","querySelector","click","filterFormControl","contains","registerControl","FormControl","get","simpleTriggerLabelFn","customTriggerLabelTemplate","trim","atLeastPartialSubstitution","substitution","replace","_","join","toggleOverallSearch","matSelectSearch","_focus","valueId","configuration","filters","controls","has","enabled","filterKeys","k","filterKey","cellValue","comparator","comparatorFn","item","cellValueLC","filterValueLC","startsWith","rowShouldBeFiltered","j","array","callback","methodName","res","Array","setValue","sortingDataAccessor","_isNumberValue","numberValue","Number","a","b","aValue","bValue","Date","getTime","isString","localeCompare","isNumber","Component","args","selector","template","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ChangeDetectorRef","Input","ViewChild","MatSelectSearchComponent","MatSort","MatTable","read","ElementRef","ViewChildren","MatOption","Subject","Map","FormGroup","NgxMatSelectTableModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatSelectModule","MatSortModule","MatOptionModule","MatCommonModule","MatTableModule","MatInputModule","MatIconModule","NgxMatSelectSearchModule","bootstrap","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {merge, Subject} from 'rxjs';\r\nimport {MatOption, MatSelect, MatSort, MatTable, MatTableDataSource, Sort, SortDirection} from '@angular/material';\r\nimport {isArray, isNullOrUndefined, isNumber, isString} from 'util';\r\nimport {MatSelectTableDataSource} from './MatSelectTableDataSource';\r\nimport {MatSelectTableRow} from './MatSelectTableRow';\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {debounceTime, take, takeUntil} from 'rxjs/operators';\r\nimport {MatSelectTableColumn} from './MatSelectTableColumn';\r\nimport {MatSelectTableFilter} from './MatSelectTableFilter';\r\nimport {MatSelectSearchComponent} from 'ngx-mat-select-search';\r\n\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n@Component({\r\n  selector: 'ngx-mat-select-table',\r\n  templateUrl: './mat-select-table.component.html',\r\n  styleUrls: ['./mat-select-table.component.scss'],\r\n  exportAs: 'ngx-mat-select-table',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => MatSelectTableComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class MatSelectTableComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n\r\n  /** Data Source for the table */\r\n  @Input() dataSource: MatSelectTableDataSource<MatSelectTableRow>;\r\n\r\n  /**\r\n   * Multiple/Single mode for {@see MatSelect#multiple} to initialize.\r\n   * NB: switching between modes in runtime is not supported by {@see MatSelect}\r\n   */\r\n  @Input() multiple: boolean;\r\n\r\n  /** Whether or not overall search mode enabled. See {@see MatSelectTableComponent} */\r\n  @Input() overallSearchEnabled: boolean;\r\n\r\n  /** Default is true */\r\n  @Input() overallSearchVisible: boolean;\r\n\r\n  /** Whether or not should {@see MatSelectTableComponent} be visible on open. Default is true */\r\n  @Input() resetSortOnOpen: boolean;\r\n\r\n  /** Whether or not previous search should be cleared on open. Default is true */\r\n  @Input() resetFiltersOnOpen: boolean;\r\n\r\n  /**\r\n   * Function to customize the default label\r\n   */\r\n  @Input() customTriggerLabelFn: (value: MatSelectTableRow[]) => string;\r\n\r\n  /**\r\n   * Template to customize the default trigger label. Has lesser priority than {@see MatSelectTableComponent#customTriggerLabelFn}.\r\n   * Substitution is case sensitive.\r\n   * Example: ${name} ${id} - ${address}\r\n   */\r\n  @Input() customTriggerLabelTemplate: string;\r\n\r\n  /**\r\n   * {@see MatSelect} proxy inputs configurator\r\n   * {@see MatSelect#multiple} gets value from {@see MatSelectTableComponent#multiple}\r\n   */\r\n  @Input() matSelectConfigurator: { [key: string]: any };\r\n\r\n  /**\r\n   * {@see MatSelectSearchComponent} proxy inputs configurator\r\n   * {@see MatSelectSearchComponent#clearSearchInput} gets value from {@see MatSelectTableComponent#resetFiltersOnOpen}\r\n   * {@see MatSelectSearchComponent} {@see ControlValueAccessor} gets value from {@see MatSelectTableComponent#overallFilterControl}\r\n   */\r\n  @Input() matSelectSearchConfigurator: { [key: string]: any };\r\n\r\n  /**\r\n   * Apply default sorting\r\n   */\r\n  @Input() defaultSort: Sort;\r\n\r\n  @ViewChild('componentSelect') private matSelect: MatSelect;\r\n\r\n  @ViewChild(MatSelectSearchComponent) private matSelectSearch: MatSelectSearchComponent;\r\n\r\n  @ViewChild(MatSort) private sort: MatSort;\r\n\r\n  @ViewChild(MatTable) private table: MatTable<MatSelectTableRow>;\r\n\r\n  @ViewChild('table', {read: ElementRef}) private tableRef: ElementRef;\r\n\r\n  @ViewChildren(MatOption) private matOptions: QueryList<MatOption>;\r\n\r\n  tableDataSource: MatSelectTableRow[];\r\n\r\n  tableColumns: string[];\r\n\r\n  tableColumnsMap: Map<string, MatSelectTableColumn>;\r\n\r\n  tableActiveRow: number;\r\n\r\n  filteredOutRows: { [key: string]: MatSelectTableRow };\r\n\r\n  completeRowList: MatSelectTableRow[] = [];\r\n\r\n  overallSearchVisibleState: boolean;\r\n\r\n  overallFilterControl: FormControl;\r\n\r\n  private filterControls: FormGroup;\r\n\r\n  private completeValueList: any[] = [];\r\n\r\n  private controlValueAccessorKeys: string[] = [\r\n    'formControl',\r\n    'formControlName',\r\n    'formGroup',\r\n    'formGroupName',\r\n    'formArray',\r\n    'formArrayName'\r\n  ];\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _onDestroy = new Subject<void>();\r\n\r\n  private _onSelectOpen = new Subject<void>();\r\n\r\n  private _onOptionsChange = new Subject<void>();\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this.tableColumnsMap = new Map();\r\n    this.filterControls = new FormGroup({});\r\n    this.overallFilterControl = new FormControl('');\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.multiple = this.multiple || false;\r\n    this.matSelect.openedChange\r\n      .pipe(takeUntil(this._onDestroy))\r\n      .subscribe(opened => {\r\n        if (this.resetFiltersOnOpen !== false || !this.matOptions.length) {\r\n          this.resetFilters();\r\n        }\r\n        this.overallSearchVisibleState = this.overallSearchVisible;\r\n        if (this.resetSortOnOpen !== false) {\r\n          this.sort.sort({id: '', start: 'asc', disableClear: false});\r\n        }\r\n        if (!opened) {\r\n          return;\r\n        }\r\n        if (this.overallSearchEnabled) {\r\n          this.proxyMatSelectSearchConfiguration(this.matSelectSearchConfigurator);\r\n        }\r\n        // ToDo: get rid of this workaround (updates header row [otherwise sort mechanism produces glitches])\r\n        (this.table as any)._headerRowDefChanged = true;\r\n        // Disable sort buttons to prevent sorting change on SPACE key pressed in filter field\r\n        setTimeout(() => [].forEach.call(\r\n          this.tableRef.nativeElement.querySelectorAll('button.mat-sort-header-button'),\r\n          (e) => e.disabled = true)\r\n        );\r\n\r\n        // Patch the height of the panel to include the height of the header and footer\r\n        const panelElement: HTMLDivElement = this.matSelect.panel.nativeElement;\r\n        const panelHeight = panelElement.getBoundingClientRect().height;\r\n        let tableAdditionalHeight = 0;\r\n        this.table\r\n          ._getRenderedRows(this.table._headerRowOutlet)\r\n          .concat(this.table._getRenderedRows(this.table._footerRowOutlet))\r\n          .forEach(row => tableAdditionalHeight += row.getBoundingClientRect().height);\r\n        if (!isNaN(panelHeight)) {\r\n          panelElement.style.maxHeight = `${panelHeight + tableAdditionalHeight}px`;\r\n        }\r\n\r\n        if (!this.matSelectSearchConfigurator.disableScrollToActiveOnOptionsChanged\r\n          && !isNullOrUndefined(this.matSelect._keyManager) && this.completeRowList.length > 0) {\r\n          this._onSelectOpen.pipe(takeUntil(this._onDestroy), debounceTime(1), take(1)).subscribe(() => {\r\n            const firstValue = `${this.completeRowList[0].id}`;\r\n            for (let i = 0; i < this.tableDataSource.length; i++) {\r\n              if (`${this.tableDataSource[i].id}` === firstValue) {\r\n                this.matSelect._keyManager.setActiveItem(i);\r\n                this.cd.detectChanges();\r\n                break;\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    merge(...[\r\n      this._onOptionsChange,\r\n      this.sort.sortChange,\r\n      this.filterControls.valueChanges,\r\n      this.overallFilterControl.valueChanges\r\n    ])\r\n      .pipe(takeUntil(this._onDestroy), debounceTime(100))\r\n      .subscribe(() => {\r\n        const dataClone: MatSelectTableRow[] = [...this.dataSource.data];\r\n\r\n        // Apply filtering\r\n        if (this.overallSearchEnabled && this.overallSearchVisibleState) {\r\n          this.applyOverallFilter(dataClone);\r\n        } else {\r\n          this.applyColumnLevelFilters(dataClone);\r\n        }\r\n\r\n        // Inherit default sorting options if sort not specified\r\n        if (!this.sort.active && !isNullOrUndefined(this.defaultSort) && this.defaultSort.active) {\r\n          this.sort.active = this.defaultSort.active;\r\n          this.sort.direction = this.defaultSort.direction;\r\n        }\r\n\r\n        // Apply default or manual sorting\r\n        this.tableDataSource = !this.sort.active ?\r\n          dataClone : this.sortData(dataClone, this.sort.active, this.sort.direction);\r\n\r\n        this.cd.detectChanges();\r\n\r\n        this._onSelectOpen.next();\r\n      });\r\n\r\n    // Manually sort data for this.matSelect.options (QueryList<MatOption>) and notify matSelect.options of changes\r\n    // It's important to keep this.matSelect.options order synchronized with data in the table\r\n    //     because this.matSelect.options (QueryList<MatOption>) doesn't update it's state after table data is changed\r\n    this.matOptions.changes.subscribe(() => {\r\n      const options: { [key: string]: MatOption } = {};\r\n      this.matOptions.toArray()\r\n        .filter(option => !isNullOrUndefined(option))\r\n        .forEach(option => options[`${option.value}`] = option);\r\n      this.matSelect.options.reset(this.tableDataSource\r\n        .filter(row => !isNullOrUndefined(options[`${row.id}`]))\r\n        .map(row => options[`${row.id}`]));\r\n      this.matSelect.options.notifyOnChanges();\r\n    });\r\n\r\n    if (!isNullOrUndefined(this.matSelect._keyManager)) {\r\n      // Subscribe on KeyManager changes to highlight the table rows accordingly\r\n      this.matSelect._keyManager.change\r\n        .pipe(takeUntil(this._onDestroy))\r\n        .subscribe(activeRow => this.tableActiveRow = activeRow);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this._onSelectOpen.complete();\r\n    this._onDestroy.next();\r\n    this._onDestroy.complete();\r\n  }\r\n\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    const proxyFn: (value: any) => void = (value: any) => {\r\n      // ToDo: refactor - comparison mechanism isn't optimized. filteredOutRows is a map but completeValueList is an array\r\n      if (this.multiple === true) {\r\n        for (let i = this.completeValueList.length - 1; i >= 0; i--) {\r\n          if (this.filteredOutRows[`${this.completeValueList[i]}`] === undefined && value.indexOf(this.completeValueList[i]) === -1) {\r\n            this.completeValueList.splice(i, 1);\r\n          }\r\n        }\r\n        value\r\n          .filter(choice => this.completeValueList.indexOf(choice) === -1)\r\n          .forEach(choice => this.completeValueList.push(choice));\r\n        this.matSelect.value = this.completeValueList;\r\n        fn(this.completeValueList);\r\n        this.completeRowList.splice(0);\r\n        this.dataSource.data\r\n          .filter(row => this.completeValueList.indexOf(row.id) !== -1)\r\n          .forEach(row => this.completeRowList.push(row));\r\n      } else {\r\n        fn(value);\r\n        this.completeRowList.splice(0);\r\n        this.dataSource.data\r\n          .filter(row => row.id === value)\r\n          .forEach(row => this.completeRowList.push(row));\r\n      }\r\n    };\r\n    this.matSelect.registerOnChange(proxyFn);\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.matSelect.registerOnTouched(fn);\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.matSelect.setDisabledState(isDisabled);\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.updateCompleteRowList(value);\r\n    this.matSelect.writeValue(value);\r\n    if (this.matSelect.value !== value) {\r\n      this.matSelect.value = value;\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n\r\n    if (!isNullOrUndefined(changes.resetFiltersOnOpen) && changes.resetFiltersOnOpen.currentValue !== false) {\r\n      this.resetFilters();\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.dataSource)) {\r\n      this.updateCompleteRowList(this.completeRowList.map(row => row.id));\r\n    }\r\n\r\n    // Proxy @Input bindings to MatSelect\r\n    if (!isNullOrUndefined(changes.matSelectConfigurator)) {\r\n      const configuration = changes.matSelectConfigurator.currentValue;\r\n      Object.keys(configuration)\r\n        .filter(key => !['multiple', 'panelClass'].includes(key) && !this.controlValueAccessorKeys.includes(key))\r\n        .forEach(key => this.matSelect[key] = configuration[key]);\r\n      const panelClass: string[] = [];\r\n      panelClass.push('mat-select-search-table-panel');\r\n      if (!isNullOrUndefined(configuration.panelClass)) {\r\n        panelClass.push(configuration.panelClass);\r\n      }\r\n      if (this.overallSearchEnabled) {\r\n        panelClass.push('mat-select-search-panel');\r\n      }\r\n      this.matSelect.panelClass = panelClass;\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.matSelectSearchConfigurator)) {\r\n      this.proxyMatSelectSearchConfiguration(changes.matSelectSearchConfigurator.currentValue);\r\n    }\r\n\r\n    if (!isNullOrUndefined(changes.dataSource)\r\n      && !isNullOrUndefined(changes.dataSource.currentValue)\r\n      && isArray(changes.dataSource.currentValue.data)) {\r\n      this.tableDataSource = [...changes.dataSource.currentValue.data];\r\n      this.tableColumns = ['_selection', ...changes.dataSource.currentValue.columns.map(column => column.key)];\r\n      this.tableColumnsMap.clear();\r\n      changes.dataSource.currentValue.columns.forEach(column => this.tableColumnsMap.set(column.key, column));\r\n      this.applyProxyToArray(changes.dataSource.currentValue.data, () => {\r\n        this._onOptionsChange.next();\r\n      });\r\n      this._onOptionsChange.next();\r\n    }\r\n  }\r\n\r\n  emulateMatOptionClick(event: MouseEvent): void {\r\n    if (event.composedPath()\r\n      .filter(et => et instanceof HTMLElement)\r\n      .some((et: HTMLElement) => et.tagName.toLowerCase() === 'mat-option')) {\r\n      return;\r\n    }\r\n    if (!(event.target instanceof HTMLElement)) {\r\n      return;\r\n    }\r\n    let rowElement = event.target;\r\n    while (rowElement != null && rowElement instanceof HTMLElement && rowElement.tagName.toLowerCase() !== 'tr') {\r\n      rowElement = rowElement.parentElement;\r\n    }\r\n    if (rowElement === null) {\r\n      return;\r\n    }\r\n    const childOption: HTMLElement = rowElement.querySelector('mat-option');\r\n    if (!childOption) {\r\n      return;\r\n    }\r\n    childOption.click();\r\n  }\r\n\r\n\r\n  filterFormControl(key: string): FormControl {\r\n    if (!this.filterControls.contains(key)) {\r\n      this.filterControls.registerControl(key, new FormControl(''));\r\n    }\r\n    return <FormControl>this.filterControls.get(key);\r\n  }\r\n\r\n  simpleTriggerLabelFn(value: MatSelectTableRow[]): string {\r\n    return value.map(row => {\r\n      if (isNullOrUndefined(row)) {\r\n        return '';\r\n      }\r\n      if (isNullOrUndefined(this.customTriggerLabelTemplate)\r\n        || typeof this.customTriggerLabelTemplate !== 'string'\r\n        || this.customTriggerLabelTemplate.trim().length === 0) {\r\n        return `${row.id}`;\r\n      }\r\n      let atLeastPartialSubstitution = false;\r\n      const substitution: string = this.customTriggerLabelTemplate.replace(/[$]{1}[{]{1}([^}]+)[}]{1}?/g, (_, key) =>\r\n        !isNullOrUndefined(row[key]) && (atLeastPartialSubstitution = true) ? row[key] : '');\r\n      if (atLeastPartialSubstitution === false) {\r\n        return `${row.id}`;\r\n      }\r\n      return substitution.trim();\r\n    }).join(', ');\r\n  }\r\n\r\n  toggleOverallSearch(): void {\r\n    this.overallSearchVisibleState = !this.overallSearchVisibleState;\r\n    this.resetFilters();\r\n    if (this.overallSearchVisibleState) {\r\n      setTimeout(() => this.matSelectSearch._focus());\r\n    }\r\n  }\r\n\r\n  private updateCompleteRowList(value: any[]): void {\r\n    this.completeRowList.splice(0);\r\n    this.completeValueList.splice(0);\r\n    if (isNullOrUndefined(value)) {\r\n      return;\r\n    }\r\n    const valueArray: any[] = !isArray(value) ? [value] : value;\r\n    valueArray\r\n      .filter(valueId => !isNullOrUndefined(valueId))\r\n      .forEach(valueId => {\r\n        this.dataSource.data.filter(row => !isNullOrUndefined(row) && !isNullOrUndefined(row.id) && row.id === valueId)\r\n          .forEach(row => {\r\n            this.completeRowList.push(row);\r\n            this.completeValueList.push(row.id);\r\n          });\r\n      });\r\n  }\r\n\r\n  private proxyMatSelectSearchConfiguration(configuration: { [key: string]: any }): void {\r\n    if (isNullOrUndefined(this.matSelectSearch)) {\r\n      return;\r\n    }\r\n\r\n    // Proxy @Input bindings to NgxMatSelectSearch\r\n    Object.keys(configuration)\r\n      .filter(key => !['clearSearchInput'].includes(key) && !this.controlValueAccessorKeys.includes(key))\r\n      .forEach(key => this.matSelectSearch[key] = configuration[key]);\r\n  }\r\n\r\n  private applyColumnLevelFilters(data: MatSelectTableRow[]): void {\r\n    this.filteredOutRows = {};\r\n    const filters: { [key: string]: { filter: MatSelectTableFilter, value: any } } = {};\r\n    Object.keys(this.filterControls.controls)\r\n      .filter(key => this.tableColumnsMap.has(key)\r\n        && !isNullOrUndefined(this.tableColumnsMap.get(key).filter)\r\n        // If filter is enabled\r\n        && this.tableColumnsMap.get(key).filter.enabled !== false)\r\n      .filter(key => {\r\n        const value = this.filterControls.get(key).value;\r\n        return !isNullOrUndefined(value)\r\n          // If an array - check it's not empty\r\n          && ((isArray(value) && value.length > 0)\r\n            // If string - check that not blank\r\n            || (typeof value === 'string' && value.trim().length > 0)\r\n            // If number - check that toString() is not blank\r\n            || (typeof value === 'number' && `${value}`.trim().length > 0));\r\n      })\r\n      .forEach(key => filters[key] = {\r\n        filter: this.tableColumnsMap.get(key).filter,\r\n        value: this.filterControls.get(key).value\r\n      });\r\n    const filterKeys: string[] = Object.keys(filters);\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      for (let k = 0; k < filterKeys.length; k++) {\r\n        const filterKey: string = filterKeys[k];\r\n        const row: MatSelectTableRow = data[i];\r\n        const cellValue: any = row[filterKey];\r\n        if (isNullOrUndefined(cellValue)) {\r\n          continue;\r\n        }\r\n        const filter = filters[filterKey];\r\n        const comparator = filter.filter.comparator;\r\n        if (typeof filter.filter.comparatorFn === 'function') {\r\n          if (!filter.filter.comparatorFn.call(null, cellValue, filter.value, row)) {\r\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n            break;\r\n          }\r\n        } else if (isNullOrUndefined(comparator) || comparator === 'equals') {\r\n          if (filter.value !== cellValue) {\r\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n            break;\r\n          }\r\n        } else if (typeof cellValue === 'string' && typeof filter.value === 'string') {\r\n          const cellValueLC: string = `${cellValue}`.toLowerCase();\r\n          const filterValueLC: string = filter.value.toLowerCase();\r\n          if (isNullOrUndefined(comparator) || comparator === 'equalsIgnoreCase') {\r\n            if (filterValueLC !== cellValueLC) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'contains') {\r\n            if (cellValue.indexOf(filter.value) === -1) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'containsIgnoreCase') {\r\n            if (cellValueLC.indexOf(filterValueLC) === -1) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'startsWith') {\r\n            if (!cellValue.startsWith(filter.value)) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          } else if (comparator === 'startsWithIgnoreCase') {\r\n            if (!cellValueLC.startsWith(filterValueLC)) {\r\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyOverallFilter(data: MatSelectTableRow[]): void {\r\n    this.filteredOutRows = {};\r\n    if (isNullOrUndefined(this.overallFilterControl.value)) {\r\n      return;\r\n    }\r\n    const filterValueLC: string = this.overallFilterControl.value.toLowerCase();\r\n    if (filterValueLC.trim().length === 0) {\r\n      return;\r\n    }\r\n    for (let i = data.length - 1; i >= 0; i--) {\r\n      const row: MatSelectTableRow = data[i];\r\n      let rowShouldBeFiltered = true;\r\n      for (let j = this.dataSource.columns.length - 1; j >= 0; j--) {\r\n        const key: string = this.dataSource.columns[j].key;\r\n        const cellValue: any = row[key];\r\n        if (isNullOrUndefined(cellValue)) {\r\n          continue;\r\n        }\r\n        const cellValueLC: string = `${cellValue}`.toLowerCase();\r\n        if (cellValueLC.indexOf(filterValueLC) !== -1) {\r\n          rowShouldBeFiltered = false;\r\n          break;\r\n        }\r\n      }\r\n      if (rowShouldBeFiltered) {\r\n        data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\r\n      }\r\n    }\r\n  }\r\n\r\n  private applyProxyToArray(array: any[], callback: () => void): void {\r\n    ['pop', 'push', 'reverse', 'shift', 'unshift', 'splice', 'sort'].forEach((methodName) => {\r\n      array[methodName] = function () {\r\n        const res = Array.prototype[methodName].apply(array, arguments); // call normal behaviour\r\n        callback.apply(array, arguments); // finally call the callback supplied\r\n        return res;\r\n      };\r\n    });\r\n  }\r\n\r\n  private resetFilters(): void {\r\n    this.overallFilterControl.setValue('');\r\n    Object.keys(this.filterControls.controls)\r\n      .forEach(key => this.filterControls.get(key).setValue(''));\r\n  }\r\n\r\n  /**\r\n   * Taken from {@see MatTableDataSource#sortingDataAccessor}\r\n   *\r\n   * @param data\r\n   * @param sortHeaderId\r\n   */\r\n  private sortingDataAccessor(data: MatSelectTableRow, active: string): string | number | Date {\r\n\r\n    const value = (data as { [key: string]: any })[active];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n\r\n  private sortData(data: MatSelectTableRow[], active: string, direction: SortDirection): MatSelectTableRow[] {\r\n    if (!active || direction === '') {\r\n      return data;\r\n    }\r\n\r\n    return data.sort((a, b) => {\r\n      let aValue = this.sortingDataAccessor(a, active);\r\n      let bValue = this.sortingDataAccessor(b, active);\r\n\r\n      // Both null/undefined/equal value check\r\n      if (aValue === bValue) {\r\n        return 0;\r\n      }\r\n\r\n      // One null value check\r\n      if (isNullOrUndefined(aValue) && !isNullOrUndefined(bValue)) {\r\n        return -1;\r\n      } else if (!isNullOrUndefined(aValue) && isNullOrUndefined(bValue)) {\r\n        return 1;\r\n      }\r\n\r\n      if (aValue instanceof Date) {\r\n        aValue = aValue.getTime();\r\n      }\r\n      if (bValue instanceof Date) {\r\n        bValue = bValue.getTime();\r\n      }\r\n\r\n      // User localeCompare for strings\r\n      if (isString(aValue) && isString(bValue)) {\r\n        return (<string>aValue).localeCompare(<string>bValue) * (this.sort.direction === 'asc' ? 1 : -1);\r\n      }\r\n\r\n      // Try to convert to a Number type\r\n      aValue = isNaN(<number>aValue) ? `${aValue}` : +aValue;\r\n      bValue = isNaN(<number>bValue) ? `${bValue}` : +bValue;\r\n\r\n      // if one is number and other is String\r\n      if (isString(aValue) && isNumber(bValue)) {\r\n        return (1) * (this.sort.direction === 'asc' ? 1 : -1);\r\n      }\r\n      if (isNumber(aValue) && isString(bValue)) {\r\n        return (-1) * (this.sort.direction === 'asc' ? 1 : -1);\r\n      }\r\n\r\n      // Compare as Numbers otherwise\r\n      return (aValue > bValue ? 1 : -1) * (this.sort.direction === 'asc' ? 1 : -1);\r\n    });\r\n  }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\n\r\nimport {CommonModule} from '@angular/common';\r\nimport {MatSelectTableComponent} from './mat-select-table.component';\r\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\r\nimport {\r\n  MatCommonModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatOptionModule,\r\n  MatSelectModule,\r\n  MatSortModule,\r\n  MatTableModule\r\n} from '@angular/material';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MatSelectTableComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    MatOptionModule,\r\n    MatCommonModule,\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    NgxMatSelectSearchModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [MatSelectTableComponent],\r\n  exports: [MatSelectTableComponent]\r\n})\r\nexport class NgxMatSelectTableModule {\r\n}\r\n"]}