{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://ngx-mat-select-table/mat-select-table.component.ts","ng://ngx-mat-select-table/ngx-mat-select-table.module.ts"],"names":["__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","MatSelectTableComponent","prototype","ngOnInit","_this","this","multiple","matSelect","openedChange","pipe","takeUntil","_onDestroy","subscribe","opened","resetFiltersOnOpen","matOptions","resetFilters","overallSearchVisibleState","overallSearchVisible","resetSortOnOpen","sort","id","start","disableClear","overallSearchEnabled","proxyMatSelectSearchConfiguration","matSelectSearchConfigurator","_headerRowDefChanged","setTimeout","forEach","tableRef","nativeElement","querySelectorAll","disabled","panelElement","panel","panelHeight","getBoundingClientRect","height","tableAdditionalHeight","table","_getRenderedRows","_headerRowOutlet","_footerRowOutlet","row","isNaN","style","maxHeight","disableScrollToActiveOnOptionsChanged","isNullOrUndefined","_keyManager","completeRowList","_onSelectOpen","debounceTime","take","firstValue","tableDataSource","setActiveItem","cd","detectChanges","ignored","close","emit","ngAfterViewInit","merge","apply","_onOptionsChange","sortChange","filterControls","valueChanges","overallFilterControl","dataClone","dataSource","data","applyOverallFilter","applyColumnLevelFilters","active","defaultSort","direction","sortData","changes","options","toArray","filter","option","reset","map","notifyOnChanges","change","activeRow","tableActiveRow","ngOnDestroy","complete","registerOnChange","fn","completeValueList","filteredOutRows","undefined","indexOf","splice","choice","registerOnTouched","setDisabledState","isDisabled","writeValue","updateCompleteRowList","ngOnChanges","currentValue","matSelectConfigurator","configuration_1","Object","keys","key","includes","controlValueAccessorKeys","panelClass","isArray","tableColumns","columns","column","tableColumnsMap","clear","set","applyProxyToArray","emulateMatOptionClick","event","composedPath","et","HTMLElement","some","tagName","toLowerCase","target","rowElement","parentElement","childOption","querySelector","click","filterFormControl","contains","registerControl","FormControl","get","simpleTriggerLabelFn","customTriggerLabelTemplate","trim","atLeastPartialSubstitution","substitution","replace","_","join","toggleOverallSearch","matSelectSearch","_focus","valueId","configuration","filters","controls","has","enabled","filterKeys","k","filterKey","cellValue","comparator","comparatorFn","item","cellValueLC","filterValueLC","startsWith","rowShouldBeFiltered","j","array","callback","methodName","res","Array","setValue","sortingDataAccessor","_isNumberValue","numberValue","Number","a","b","aValue","bValue","Date","getTime","isString","localeCompare","isNumber","Component","args","selector","template","exportAs","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ChangeDetectorRef","Input","Output","ViewChild","MatSelectSearchComponent","MatSort","MatTable","read","ElementRef","ViewChildren","MatOption","EventEmitter","Subject","Map","FormGroup","NgxMatSelectTableModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","MatSelectModule","MatSortModule","MatOptionModule","MatCommonModule","MatTableModule","MatInputModule","MatIconModule","NgxMatSelectSearchModule","bootstrap","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef, EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit, Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {merge, Subject} from 'rxjs';\nimport {MatOption, MatSelect, MatSort, MatTable, MatTableDataSource, Sort, SortDirection} from '@angular/material';\nimport {isArray, isNullOrUndefined, isNumber, isString} from 'util';\nimport {MatSelectTableDataSource} from './MatSelectTableDataSource';\nimport {MatSelectTableRow} from './MatSelectTableRow';\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {debounceTime, take, takeUntil} from 'rxjs/operators';\nimport {MatSelectTableColumn} from './MatSelectTableColumn';\nimport {MatSelectTableFilter} from './MatSelectTableFilter';\nimport {MatSelectSearchComponent} from 'ngx-mat-select-search';\n\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n@Component({\n  selector: 'ngx-mat-select-table',\n  templateUrl: './mat-select-table.component.html',\n  styleUrls: ['./mat-select-table.component.scss'],\n  exportAs: 'ngx-mat-select-table',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectTableComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatSelectTableComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy, OnChanges {\n\n  /** Data Source for the table */\n  @Input() dataSource: MatSelectTableDataSource<MatSelectTableRow>;\n\n  /**\n   * Multiple/Single mode for {@see MatSelect#multiple} to initialize.\n   * NB: switching between modes in runtime is not supported by {@see MatSelect}\n   */\n  @Input() multiple: boolean;\n\n  /** Whether or not overall search mode enabled. See {@see MatSelectTableComponent} */\n  @Input() overallSearchEnabled: boolean;\n\n  /** Default is true */\n  @Input() overallSearchVisible: boolean;\n\n  /** Whether or not should {@see MatSelectTableComponent} be visible on open. Default is true */\n  @Input() resetSortOnOpen: boolean;\n\n  /** Whether or not previous search should be cleared on open. Default is true */\n  @Input() resetFiltersOnOpen: boolean;\n\n  /**\n   * Function to customize the default label\n   */\n  @Input() customTriggerLabelFn: (value: MatSelectTableRow[]) => string;\n\n  /**\n   * Template to customize the default trigger label. Has lesser priority than {@see MatSelectTableComponent#customTriggerLabelFn}.\n   * Substitution is case sensitive.\n   * Example: ${name} ${id} - ${address}\n   */\n  @Input() customTriggerLabelTemplate: string;\n\n  /**\n   * {@see MatSelect} proxy inputs configurator\n   * {@see MatSelect#multiple} gets value from {@see MatSelectTableComponent#multiple}\n   */\n  @Input() matSelectConfigurator: { [key: string]: any };\n\n  /**\n   * {@see MatSelectSearchComponent} proxy inputs configurator\n   * {@see MatSelectSearchComponent#clearSearchInput} gets value from {@see MatSelectTableComponent#resetFiltersOnOpen}\n   * {@see MatSelectSearchComponent} {@see ControlValueAccessor} gets value from {@see MatSelectTableComponent#overallFilterControl}\n   */\n  @Input() matSelectSearchConfigurator: { [key: string]: any };\n\n  /**\n   * Apply default sorting\n   */\n  @Input() defaultSort: Sort;\n\n  @Output() close: EventEmitter<boolean> = new EventEmitter();\n\n  @ViewChild('componentSelect') private matSelect: MatSelect;\n\n  @ViewChild(MatSelectSearchComponent) private matSelectSearch: MatSelectSearchComponent;\n\n  @ViewChild(MatSort) private sort: MatSort;\n\n  @ViewChild(MatTable) private table: MatTable<MatSelectTableRow>;\n\n  @ViewChild('table', {read: ElementRef}) private tableRef: ElementRef;\n\n  @ViewChildren(MatOption) private matOptions: QueryList<MatOption>;\n\n  tableDataSource: MatSelectTableRow[];\n\n  tableColumns: string[];\n\n  tableColumnsMap: Map<string, MatSelectTableColumn>;\n\n  tableActiveRow: number;\n\n  filteredOutRows: { [key: string]: MatSelectTableRow };\n\n  completeRowList: MatSelectTableRow[] = [];\n\n  overallSearchVisibleState: boolean;\n\n  overallFilterControl: FormControl;\n\n  private filterControls: FormGroup;\n\n  private completeValueList: any[] = [];\n\n  private controlValueAccessorKeys: string[] = [\n    'formControl',\n    'formControlName',\n    'formGroup',\n    'formGroupName',\n    'formArray',\n    'formArrayName'\n  ];\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n  private _onSelectOpen = new Subject<void>();\n\n  private _onOptionsChange = new Subject<void>();\n\n  constructor(private cd: ChangeDetectorRef) {\n    this.tableColumnsMap = new Map();\n    this.filterControls = new FormGroup({});\n    this.overallFilterControl = new FormControl('');\n  }\n\n  ngOnInit(): void {\n    this.multiple = this.multiple || false;\n    this.matSelect.openedChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(opened => {\n        if (this.resetFiltersOnOpen !== false || !this.matOptions.length) {\n          this.resetFilters();\n        }\n        this.overallSearchVisibleState = this.overallSearchVisible;\n        if (this.resetSortOnOpen !== false) {\n          this.sort.sort({id: '', start: 'asc', disableClear: false});\n        }\n        if (!opened) {\n          this.close.emit(!opened);\n          return;\n        }\n        if (this.overallSearchEnabled) {\n          this.proxyMatSelectSearchConfiguration(this.matSelectSearchConfigurator);\n        }\n        // ToDo: get rid of this workaround (updates header row [otherwise sort mechanism produces glitches])\n        (this.table as any)._headerRowDefChanged = true;\n        // Disable sort buttons to prevent sorting change on SPACE key pressed in filter field\n        setTimeout(() => [].forEach.call(\n          this.tableRef.nativeElement.querySelectorAll('button.mat-sort-header-button'),\n          (e) => e.disabled = true)\n        );\n\n        // Patch the height of the panel to include the height of the header and footer\n        const panelElement: HTMLDivElement = this.matSelect.panel.nativeElement;\n        const panelHeight = panelElement.getBoundingClientRect().height;\n        let tableAdditionalHeight = 0;\n        this.table\n          ._getRenderedRows(this.table._headerRowOutlet)\n          .concat(this.table._getRenderedRows(this.table._footerRowOutlet))\n          .forEach(row => tableAdditionalHeight += row.getBoundingClientRect().height);\n        if (!isNaN(panelHeight)) {\n          panelElement.style.maxHeight = `${panelHeight + tableAdditionalHeight}px`;\n        }\n\n        if (!this.matSelectSearchConfigurator.disableScrollToActiveOnOptionsChanged\n          && !isNullOrUndefined(this.matSelect._keyManager) && this.completeRowList.length > 0) {\n          this._onSelectOpen.pipe(takeUntil(this._onDestroy), debounceTime(1), take(1)).subscribe(() => {\n            const firstValue = `${this.completeRowList[0].id}`;\n            for (let i = 0; i < this.tableDataSource.length; i++) {\n              if (`${this.tableDataSource[i].id}` === firstValue) {\n                this.matSelect._keyManager.setActiveItem(i);\n                try {\n                  this.cd.detectChanges();\n                } catch (ignored) {\n                }\n                break;\n              }\n            }\n          });\n        }\n      });\n  }\n\n  ngAfterViewInit(): void {\n    merge(...[\n      this._onOptionsChange,\n      this.sort.sortChange,\n      this.filterControls.valueChanges,\n      this.overallFilterControl.valueChanges\n    ])\n      .pipe(takeUntil(this._onDestroy), debounceTime(100))\n      .subscribe(() => {\n        const dataClone: MatSelectTableRow[] = [...this.dataSource.data];\n\n        // Apply filtering\n        if (this.overallSearchEnabled && this.overallSearchVisibleState) {\n          this.applyOverallFilter(dataClone);\n        } else {\n          this.applyColumnLevelFilters(dataClone);\n        }\n\n        // Inherit default sorting options if sort not specified\n        if (!this.sort.active && !isNullOrUndefined(this.defaultSort) && this.defaultSort.active) {\n          this.sort.active = this.defaultSort.active;\n          this.sort.direction = this.defaultSort.direction;\n        }\n\n        // Apply default or manual sorting\n        this.tableDataSource = !this.sort.active ?\n          dataClone : this.sortData(dataClone, this.sort.active, this.sort.direction);\n\n        try {\n          this.cd.detectChanges();\n        } catch (ignored) {\n        }\n\n        this._onSelectOpen.next();\n      });\n\n    // Manually sort data for this.matSelect.options (QueryList<MatOption>) and notify matSelect.options of changes\n    // It's important to keep this.matSelect.options order synchronized with data in the table\n    //     because this.matSelect.options (QueryList<MatOption>) doesn't update it's state after table data is changed\n    this.matOptions.changes.subscribe(() => {\n      const options: { [key: string]: MatOption } = {};\n      this.matOptions.toArray()\n        .filter(option => !isNullOrUndefined(option))\n        .forEach(option => options[`${option.value}`] = option);\n      this.matSelect.options.reset(this.tableDataSource\n        .filter(row => !isNullOrUndefined(options[`${row.id}`]))\n        .map(row => options[`${row.id}`]));\n      this.matSelect.options.notifyOnChanges();\n    });\n\n    if (!isNullOrUndefined(this.matSelect._keyManager)) {\n      // Subscribe on KeyManager changes to highlight the table rows accordingly\n      this.matSelect._keyManager.change\n        .pipe(takeUntil(this._onDestroy))\n        .subscribe(activeRow => this.tableActiveRow = activeRow);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._onSelectOpen.complete();\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  registerOnChange(fn: (value: any) => void): void {\n    const proxyFn: (value: any) => void = (value: any) => {\n      // ToDo: refactor - comparison mechanism isn't optimized. filteredOutRows is a map but completeValueList is an array\n      if (this.multiple === true) {\n        for (let i = this.completeValueList.length - 1; i >= 0; i--) {\n          if (this.filteredOutRows[`${this.completeValueList[i]}`] === undefined && value.indexOf(this.completeValueList[i]) === -1) {\n            this.completeValueList.splice(i, 1);\n          }\n        }\n        value\n          .filter(choice => this.completeValueList.indexOf(choice) === -1)\n          .forEach(choice => this.completeValueList.push(choice));\n        this.matSelect.value = this.completeValueList;\n        fn(this.completeValueList);\n        this.completeRowList.splice(0);\n        this.dataSource.data\n          .filter(row => this.completeValueList.indexOf(row.id) !== -1)\n          .forEach(row => this.completeRowList.push(row));\n      } else {\n        fn(value);\n        this.completeRowList.splice(0);\n        this.dataSource.data\n          .filter(row => row.id === value)\n          .forEach(row => this.completeRowList.push(row));\n      }\n    };\n    this.matSelect.registerOnChange(proxyFn);\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.matSelect.registerOnTouched(fn);\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.matSelect.setDisabledState(isDisabled);\n  }\n\n  writeValue(value: any): void {\n    this.updateCompleteRowList(value);\n    this.matSelect.writeValue(value);\n    if (this.matSelect.value !== value) {\n      this.matSelect.value = value;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n    if (!isNullOrUndefined(changes.resetFiltersOnOpen) && changes.resetFiltersOnOpen.currentValue !== false) {\n      this.resetFilters();\n    }\n\n    if (!isNullOrUndefined(changes.dataSource)) {\n      this.updateCompleteRowList(this.completeRowList.map(row => row.id));\n    }\n\n    // Proxy @Input bindings to MatSelect\n    if (!isNullOrUndefined(changes.matSelectConfigurator)) {\n      const configuration = changes.matSelectConfigurator.currentValue;\n      Object.keys(configuration)\n        .filter(key => !['multiple', 'panelClass'].includes(key) && !this.controlValueAccessorKeys.includes(key))\n        .forEach(key => this.matSelect[key] = configuration[key]);\n      const panelClass: string[] = [];\n      panelClass.push('mat-select-search-table-panel');\n      if (!isNullOrUndefined(configuration.panelClass)) {\n        panelClass.push(configuration.panelClass);\n      }\n      if (this.overallSearchEnabled) {\n        panelClass.push('mat-select-search-panel');\n      }\n      this.matSelect.panelClass = panelClass;\n    }\n\n    if (!isNullOrUndefined(changes.matSelectSearchConfigurator)) {\n      this.proxyMatSelectSearchConfiguration(changes.matSelectSearchConfigurator.currentValue);\n    }\n\n    if (!isNullOrUndefined(changes.dataSource)\n      && !isNullOrUndefined(changes.dataSource.currentValue)\n      && isArray(changes.dataSource.currentValue.data)) {\n      this.tableDataSource = [...changes.dataSource.currentValue.data];\n      this.tableColumns = ['_selection', ...changes.dataSource.currentValue.columns.map(column => column.key)];\n      this.tableColumnsMap.clear();\n      changes.dataSource.currentValue.columns.forEach(column => this.tableColumnsMap.set(column.key, column));\n      this.applyProxyToArray(changes.dataSource.currentValue.data, () => {\n        this._onOptionsChange.next();\n      });\n      this._onOptionsChange.next();\n    }\n  }\n\n  emulateMatOptionClick(event: MouseEvent): void {\n    if (event.composedPath()\n      .filter(et => et instanceof HTMLElement)\n      .some((et: HTMLElement) => et.tagName.toLowerCase() === 'mat-option')) {\n      return;\n    }\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    let rowElement = event.target;\n    while (rowElement != null && rowElement instanceof HTMLElement && rowElement.tagName.toLowerCase() !== 'tr') {\n      rowElement = rowElement.parentElement;\n    }\n    if (rowElement === null) {\n      return;\n    }\n    const childOption: HTMLElement = rowElement.querySelector('mat-option');\n    if (!childOption) {\n      return;\n    }\n    childOption.click();\n  }\n\n\n  filterFormControl(key: string): FormControl {\n    if (!this.filterControls.contains(key)) {\n      this.filterControls.registerControl(key, new FormControl(''));\n    }\n    return <FormControl>this.filterControls.get(key);\n  }\n\n  simpleTriggerLabelFn(value: MatSelectTableRow[]): string {\n    return value.map(row => {\n      if (isNullOrUndefined(row)) {\n        return '';\n      }\n      if (isNullOrUndefined(this.customTriggerLabelTemplate)\n        || typeof this.customTriggerLabelTemplate !== 'string'\n        || this.customTriggerLabelTemplate.trim().length === 0) {\n        return `${row.id}`;\n      }\n      let atLeastPartialSubstitution = false;\n      const substitution: string = this.customTriggerLabelTemplate.replace(/[$]{1}[{]{1}([^}]+)[}]{1}?/g, (_, key) =>\n        !isNullOrUndefined(row[key]) && (atLeastPartialSubstitution = true) ? row[key] : '');\n      if (atLeastPartialSubstitution === false) {\n        return `${row.id}`;\n      }\n      return substitution.trim();\n    }).join(', ');\n  }\n\n  toggleOverallSearch(): void {\n    this.overallSearchVisibleState = !this.overallSearchVisibleState;\n    this.resetFilters();\n    if (this.overallSearchVisibleState) {\n      setTimeout(() => this.matSelectSearch._focus());\n    }\n  }\n\n  private updateCompleteRowList(value: any[]): void {\n    this.completeRowList.splice(0);\n    this.completeValueList.splice(0);\n    if (isNullOrUndefined(value)) {\n      return;\n    }\n    const valueArray: any[] = !isArray(value) ? [value] : value;\n    valueArray\n      .filter(valueId => !isNullOrUndefined(valueId))\n      .forEach(valueId => {\n        this.dataSource.data.filter(row => !isNullOrUndefined(row) && !isNullOrUndefined(row.id) && row.id === valueId)\n          .forEach(row => {\n            this.completeRowList.push(row);\n            this.completeValueList.push(row.id);\n          });\n      });\n  }\n\n  private proxyMatSelectSearchConfiguration(configuration: { [key: string]: any }): void {\n    if (isNullOrUndefined(this.matSelectSearch)) {\n      return;\n    }\n\n    // Proxy @Input bindings to NgxMatSelectSearch\n    Object.keys(configuration)\n      .filter(key => !['clearSearchInput'].includes(key) && !this.controlValueAccessorKeys.includes(key))\n      .forEach(key => this.matSelectSearch[key] = configuration[key]);\n  }\n\n  private applyColumnLevelFilters(data: MatSelectTableRow[]): void {\n    this.filteredOutRows = {};\n    const filters: { [key: string]: { filter: MatSelectTableFilter, value: any } } = {};\n    Object.keys(this.filterControls.controls)\n      .filter(key => this.tableColumnsMap.has(key)\n        && !isNullOrUndefined(this.tableColumnsMap.get(key).filter)\n        // If filter is enabled\n        && this.tableColumnsMap.get(key).filter.enabled !== false)\n      .filter(key => {\n        const value = this.filterControls.get(key).value;\n        return !isNullOrUndefined(value)\n          // If an array - check it's not empty\n          && ((isArray(value) && value.length > 0)\n            // If string - check that not blank\n            || (typeof value === 'string' && value.trim().length > 0)\n            // If number - check that toString() is not blank\n            || (typeof value === 'number' && `${value}`.trim().length > 0));\n      })\n      .forEach(key => filters[key] = {\n        filter: this.tableColumnsMap.get(key).filter,\n        value: this.filterControls.get(key).value\n      });\n    const filterKeys: string[] = Object.keys(filters);\n    for (let i = data.length - 1; i >= 0; i--) {\n      for (let k = 0; k < filterKeys.length; k++) {\n        const filterKey: string = filterKeys[k];\n        const row: MatSelectTableRow = data[i];\n        const cellValue: any = row[filterKey];\n        if (isNullOrUndefined(cellValue)) {\n          continue;\n        }\n        const filter = filters[filterKey];\n        const comparator = filter.filter.comparator;\n        if (typeof filter.filter.comparatorFn === 'function') {\n          if (!filter.filter.comparatorFn.call(null, cellValue, filter.value, row)) {\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n            break;\n          }\n        } else if (isNullOrUndefined(comparator) || comparator === 'equals') {\n          if (filter.value !== cellValue) {\n            data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n            break;\n          }\n        } else if (typeof cellValue === 'string' && typeof filter.value === 'string') {\n          const cellValueLC: string = `${cellValue}`.toLowerCase();\n          const filterValueLC: string = filter.value.toLowerCase();\n          if (isNullOrUndefined(comparator) || comparator === 'equalsIgnoreCase') {\n            if (filterValueLC !== cellValueLC) {\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n              break;\n            }\n          } else if (comparator === 'contains') {\n            if (cellValue.indexOf(filter.value) === -1) {\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n              break;\n            }\n          } else if (comparator === 'containsIgnoreCase') {\n            if (cellValueLC.indexOf(filterValueLC) === -1) {\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n              break;\n            }\n          } else if (comparator === 'startsWith') {\n            if (!cellValue.startsWith(filter.value)) {\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n              break;\n            }\n          } else if (comparator === 'startsWithIgnoreCase') {\n            if (!cellValueLC.startsWith(filterValueLC)) {\n              data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n              break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private applyOverallFilter(data: MatSelectTableRow[]): void {\n    this.filteredOutRows = {};\n    if (isNullOrUndefined(this.overallFilterControl.value)) {\n      return;\n    }\n    const filterValueLC: string = this.overallFilterControl.value.toLowerCase();\n    if (filterValueLC.trim().length === 0) {\n      return;\n    }\n    for (let i = data.length - 1; i >= 0; i--) {\n      const row: MatSelectTableRow = data[i];\n      let rowShouldBeFiltered = true;\n      for (let j = this.dataSource.columns.length - 1; j >= 0; j--) {\n        const key: string = this.dataSource.columns[j].key;\n        const cellValue: any = row[key];\n        if (isNullOrUndefined(cellValue)) {\n          continue;\n        }\n        const cellValueLC: string = `${cellValue}`.toLowerCase();\n        if (cellValueLC.indexOf(filterValueLC) !== -1) {\n          rowShouldBeFiltered = false;\n          break;\n        }\n      }\n      if (rowShouldBeFiltered) {\n        data.splice(i, 1).forEach(item => this.filteredOutRows[`${item.id}`] = item);\n      }\n    }\n  }\n\n  private applyProxyToArray(array: any[], callback: () => void): void {\n    ['pop', 'push', 'reverse', 'shift', 'unshift', 'splice', 'sort'].forEach((methodName) => {\n      array[methodName] = function () {\n        const res = Array.prototype[methodName].apply(array, arguments); // call normal behaviour\n        callback.apply(array, arguments); // finally call the callback supplied\n        return res;\n      };\n    });\n  }\n\n  private resetFilters(): void {\n    this.overallFilterControl.setValue('');\n    Object.keys(this.filterControls.controls)\n      .forEach(key => this.filterControls.get(key).setValue(''));\n  }\n\n  /**\n   * Taken from {@see MatTableDataSource#sortingDataAccessor}\n   *\n   * @param data\n   * @param sortHeaderId\n   */\n  private sortingDataAccessor(data: MatSelectTableRow, active: string): string | number | Date {\n\n    const value = (data as { [key: string]: any })[active];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n\n  private sortData(data: MatSelectTableRow[], active: string, direction: SortDirection): MatSelectTableRow[] {\n    if (!active || direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      let aValue = this.sortingDataAccessor(a, active);\n      let bValue = this.sortingDataAccessor(b, active);\n\n      // Both null/undefined/equal value check\n      if (aValue === bValue) {\n        return 0;\n      }\n\n      // One null value check\n      if (isNullOrUndefined(aValue) && !isNullOrUndefined(bValue)) {\n        return -1;\n      } else if (!isNullOrUndefined(aValue) && isNullOrUndefined(bValue)) {\n        return 1;\n      }\n\n      if (aValue instanceof Date) {\n        aValue = aValue.getTime();\n      }\n      if (bValue instanceof Date) {\n        bValue = bValue.getTime();\n      }\n\n      // User localeCompare for strings\n      if (isString(aValue) && isString(bValue)) {\n        return (<string>aValue).localeCompare(<string>bValue) * (this.sort.direction === 'asc' ? 1 : -1);\n      }\n\n      // Try to convert to a Number type\n      aValue = isNaN(<number>aValue) ? `${aValue}` : +aValue;\n      bValue = isNaN(<number>bValue) ? `${bValue}` : +bValue;\n\n      // if one is number and other is String\n      if (isString(aValue) && isNumber(bValue)) {\n        return (1) * (this.sort.direction === 'asc' ? 1 : -1);\n      }\n      if (isNumber(aValue) && isString(bValue)) {\n        return (-1) * (this.sort.direction === 'asc' ? 1 : -1);\n      }\n\n      // Compare as Numbers otherwise\n      return (aValue > bValue ? 1 : -1) * (this.sort.direction === 'asc' ? 1 : -1);\n    });\n  }\n\n}\n","import {NgModule} from '@angular/core';\n\nimport {CommonModule} from '@angular/common';\nimport {MatSelectTableComponent} from './mat-select-table.component';\nimport {NgxMatSelectSearchModule} from 'ngx-mat-select-search';\nimport {\n  MatCommonModule,\n  MatIconModule,\n  MatInputModule,\n  MatOptionModule,\n  MatSelectModule,\n  MatSortModule,\n  MatTableModule\n} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    MatSelectTableComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSelectModule,\n    MatSortModule,\n    MatOptionModule,\n    MatCommonModule,\n    MatTableModule,\n    MatInputModule,\n    MatIconModule,\n    NgxMatSelectSearchModule\n  ],\n  providers: [],\n  bootstrap: [MatSelectTableComponent],\n  exports: [MatSelectTableComponent]\n})\nexport class NgxMatSelectTableModule {\n}\n"]}